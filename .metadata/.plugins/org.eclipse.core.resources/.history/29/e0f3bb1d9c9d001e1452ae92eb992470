package com.kh.springdb.service;

import com.kh.springdb.model.Cart;
import com.kh.springdb.model.CartProduct;
import com.kh.springdb.repository.CartRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class CartService {

    private final CartRepository cartRepository;

    @Autowired
    public CartService(CartRepository cartRepository) {
        this.cartRepository = cartRepository;
    }

    // 장바구니에 상품 추가
    public void addToCart(Cart cart, CartProduct cartProduct) {
        cart.addProduct(cartProduct);
        // 실제로는 데이터베이스에 장바구니 정보를 업데이트하는 로직을 추가해야 합니다.
        cartRepository.saveCart(cart);
    }

    // 장바구니에서 상품 제거
    public void removeFromCart(Cart cart, CartProduct cartProduct) {
        cart.removeProduct(cartProduct);
        // 실제로는 데이터베이스에 장바구니 정보를 업데이트하는 로직을 추가해야 합니다.
        cartRepository.saveCart(cart);
    }

    // 장바구니 비우기
    public void clearCart(Cart cart) {
        cart.clearCart();
        // 실제로는 데이터베이스에 장바구니 정보를 업데이트하는 로직을 추가해야 합니다.
        cartRepository.saveCart(cart);
    }

    // 장바구니 정보 조회
    public Cart getCartById(/* 장바구니 ID 또는 다른 식별자 */) {
        // 실제로는 데이터베이스에서 장바구니 정보를 조회하는 로직을 추가해야 합니다.
        return cartRepository.getCartById(/* 장바구니 ID 또는 다른 식별자 */);
    }

    // 현재 사용자의 장바구니 정보 조회
    public Cart getCartForCurrentUser() {
        // 현재 사용자의 정보를 가져옴
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated()) {
            String username = authentication.getName(); // 현재 사용자의 아이디 또는 username
            // 실제로는 데이터베이스에서 해당 사용자의 장바구니 정보를 조회하는 로직을 추가
            return cartRepository.getCartByUsername(username);
        }
        return null;
    }
}
